class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        Map<Integer, Integer> hashmap = new HashMap<>();
        for (int i=0; i<inorder.length; i++) {
            hashmap.put(inorder[i],i);
        }
        if (preorder==null || inorder==null || preorder.length==0 ||
           inorder.length==0 || preorder.length != inorder.length ) return null;
        return buildTreeHelper(preorder, inorder, 0,preorder.length-1,
                        0, inorder.length-1,hashmap);
    }
    
    public TreeNode buildTreeHelper(int[] preorder, int[] inorder,
                                   int preorderStart, int preorderEnd,
                                   int inorderStart, int inorderEnd,
                                   Map<Integer, Integer> hashmap) {
        if (preorderStart>preorderEnd || inorderStart>inorderEnd) return null;
        TreeNode root = new TreeNode();
        int rootVal = preorder[preorderStart];
        root.val = rootVal;
        int index = hashmap.get(rootVal);
        int l1 = index - inorderStart;
        int l2 = inorderEnd - index;
        
        root.left = buildTreeHelper(preorder, inorder, preorderStart+1,preorderStart+l1,inorderStart, index-1,hashmap);
        root.right = buildTreeHelper(preorder, inorder, preorderEnd-l2+1,preorderEnd,index+1, inorderEnd,hashmap);
        return root;
    }
}
